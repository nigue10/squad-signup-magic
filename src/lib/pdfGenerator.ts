
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import { getRegistrationById, getAllRegistrations } from './storage';
import { getSettings } from './settings';
import { TeamRegistration } from '@/types/igc';
import { 
  createPdfBackground, 
  addLogos, 
  addHeader, 
  addPdfFooter, 
  getTeamPoints,
  formatGeneralInfo,
  formatMemberInfo,
  formatSkillsSection,
  formatMotivationSection,
  generateMarkdownTemplate
} from './pdfUtils';
import { toast } from 'sonner';

/**
 * G√©n√®re un PDF pour une √©quipe sp√©cifique
 * @param teamId ID de l'√©quipe
 */
export const generateTeamPDF = async (teamId: string): Promise<void> => {
  try {
    // R√©cup√©rer les donn√©es de l'√©quipe
    const team = getRegistrationById(teamId);
    if (!team) {
      toast.error(`√âquipe avec l'ID ${teamId} non trouv√©e`);
      throw new Error(`√âquipe avec l'ID ${teamId} non trouv√©e`);
    }

    const settings = getSettings();
    
    // Pour d√©bogage: g√©n√©rer le template markdown
    console.log("Markdown template:", generateMarkdownTemplate(team, settings));
    
    // Cr√©er un nouveau document PDF
    const doc = new jsPDF();
    
    // Create background
    createPdfBackground(doc);
    
    // Add the IGC logo and header
    addLogos(doc);
    addHeader(doc, settings);
    
    // Set initial Y position for content
    let yPos = 95;
    
    // 1. General Information
    yPos = formatGeneralInfo(doc, team, yPos);
    
    // 2. Team Members
    doc.setFontSize(14);
    doc.setTextColor(27, 20, 100);
    doc.setFont("helvetica", "bold");
    doc.text("üë• Composition de l'√âquipe", 20, yPos);
    doc.setFont("helvetica", "normal");
    
    // Add notes about team composition
    doc.setFontSize(9);
    doc.setTextColor(100, 100, 100);
    doc.setFont("helvetica", "italic");
    doc.text("üëâ Le chef d'√©quipe doit figurer dans la liste ci-dessous et y renseigner ses coordonn√©es.", 25, yPos + 10);
    doc.text(`‚úÖ Rappel composition : ${team.generalInfo.category === 'Secondaire' ? 'Secondaire : 6 membres' : 'Sup√©rieur : 4 √† 6 membres'}`, 25, yPos + 18);
    doc.text("NB : Les √©quipes compos√©es de filles sont tr√®s encourag√©es.", 25, yPos + 26);
    doc.setFont("helvetica", "normal");
    
    // Add members table
    yPos = formatMemberInfo(doc, team, yPos + 30);
    
    // Check if we need a new page
    if (yPos > doc.internal.pageSize.height - 100) {
      doc.addPage();
      yPos = 20;
    }
    
    // 3. Skills Section
    yPos = formatSkillsSection(doc, team, yPos);
    
    // Check if we need a new page
    if (yPos > doc.internal.pageSize.height - 100) {
      doc.addPage();
      yPos = 20;
    }
    
    // 4. Motivation & Vision
    yPos = formatMotivationSection(doc, team, yPos);
    
    // Add footer with page numbers
    addPdfFooter(doc, team, settings);
    
    // Save the PDF
    doc.save(`IGC_${settings.applicationYear}_Fiche_${team.generalInfo.name.replace(/\s+/g, '_')}.pdf`);
    toast.success(`PDF g√©n√©r√© avec succ√®s pour l'√©quipe ${team.generalInfo.name}`);
    return Promise.resolve();
  } catch (error) {
    console.error("Erreur lors de la g√©n√©ration du PDF:", error);
    toast.error(`Erreur: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    return Promise.reject(error);
  }
};

/**
 * G√©n√®re un PDF avec toutes les √©quipes
 */
export const generateAllTeamsPDF = async (): Promise<void> => {
  try {
    const teams = getAllRegistrations();
    if (teams.length === 0) {
      toast.error("Aucune √©quipe trouv√©e");
      throw new Error("Aucune √©quipe trouv√©e");
    }
    
    toast.info(`G√©n√©ration des fiches PDF pour ${teams.length} √©quipes...`);
    
    // Create separate PDF for each team
    const promises = teams.map(team => 
      new Promise<void>((resolve, reject) => {
        try {
          if (team.id) {
            generateTeamPDF(team.id)
              .then(() => resolve())
              .catch(err => reject(err));
          } else {
            resolve(); // Ignorer les √©quipes sans ID
          }
        } catch (error) {
          reject(error);
        }
      })
    );
    
    await Promise.all(promises);
    toast.success(`${teams.length} fiches PDF ont √©t√© g√©n√©r√©es avec succ√®s.`);
  } catch (error) {
    console.error("Erreur lors de la g√©n√©ration des fiches PDF:", error);
    toast.error(`Erreur: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    throw error;
  }
};

/**
 * Exporte une seule √©quipe au format CSV
 */
export const exportTeamToCSV = (team: TeamRegistration): string => {
  // Headers for CSV
  const headers = [
    "Nom de l'√©quipe",
    "Cat√©gorie",
    "√âtablissement",
    "Ville",
    "Commune",
    "Email R√©f√©rent",
    "T√©l√©phone R√©f√©rent",
    "Statut",
    "Score QCM",
    "Qualification QCM",
    "Date entretien",
    "Heure entretien",
    "Lien entretien",
    "Score entretien",
    "Classement",
    "D√©cision",
    "Commentaires",
    "Nombre de membres",
    "Niveau en robotique",
    "Espace de travail"
  ];
  
  // Prepare data row
  const row = [
    team.generalInfo.name,
    team.generalInfo.category,
    team.generalInfo.institution,
    team.generalInfo.city,
    team.generalInfo.commune || "",
    team.generalInfo.pedagogicalReferentEmail || "",
    team.generalInfo.pedagogicalReferentPhone || "",
    team.status || "Inscrit",
    team.qcmScore !== undefined ? String(team.qcmScore) : "",
    team.qcmQualified !== undefined ? (team.qcmQualified ? "Oui" : "Non") : "",
    team.interviewDate || "",
    team.interviewTime || "",
    team.interviewLink || "",
    team.interviewScore !== undefined ? String(team.interviewScore) : "",
    team.interviewRank !== undefined ? String(team.interviewRank) : "",
    team.decision || "",
    team.comments || "",
    team.members ? String(team.members.length) : "0",
    team.vision?.roboticsLevel || "",
    team.vision?.hasWorkspace ? "Oui" : "Non"
  ];
  
  // Format as CSV
  return headers.join(",") + "\n" + row.map(field => {
    // Escape fields with commas, quotes or newlines
    if (field && (field.includes(',') || field.includes('"') || field.includes('\n'))) {
      return `"${field.replace(/"/g, '""')}"`;
    }
    return field;
  }).join(",");
};
